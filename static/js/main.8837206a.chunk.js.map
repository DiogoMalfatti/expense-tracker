{"version":3,"sources":["App.styles.ts","data/categories.ts","data/items.ts","helpers/dateFilter.ts","components/TableItem/index.tsx","components/TableArea/index.tsx","components/ResumeItem/index.tsx","components/InfoArea/index.tsx","components/InputArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","HeaderText","h1","Body","categories","food","title","color","expense","rent","salary","items","date","Date","category","value","addZeroToDate","n","formatDate","year","getFullYear","month","getMonth","day","getDate","formatCurrentMonth","currentMonth","split","parseInt","TableItem","item","TableLine","TableColumn","TableCategory","TableValue","tr","td","props","TableArea","list","Table","TableHeadColumn","width","map","index","table","th","ResumeItem","Title","Info","InfoArea","onMonthChange","income","MonthArea","MonthArrow","onClick","currentDate","setMonth","MonthTitle","ResumeArea","InputArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","InputLabel","InputTitle","Input","type","onChange","e","target","Select","key","parseFloat","Button","errors","isNaN","getTime","push","includes","length","alert","join","label","input","select","button","App","setList","filteredList","setFilteredList","now","getCurrentMonth","setCurrentMonth","setIncome","setExpense","useEffect","newList","i","filterListByMonth","incomeCount","expenseCount","newMonth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8837206a.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n\r\n`\r\n\r\nexport const Header = styled.div`\r\n  background: darkblue;\r\n  height: 150px;\r\n  text-align: center;\r\n`\r\n\r\nexport const HeaderText = styled.h1`\r\n  margin: 0;\r\n  padding: 0;\r\n  color: #fff;\r\n  padding-top: 30px;\r\n`\r\n\r\nexport const Body = styled.div`\r\n  margin: auto;\r\n  max-width: 980px;\r\n  margin-bottom: 50px;\r\n`","import { Category } from '../types/Category'\r\n\r\nexport const categories: Category = {\r\n  food: {\r\n    title: 'Alimentação',\r\n    color: 'blue',\r\n    expense: true\r\n  },\r\n  rent: {\r\n    title: 'Aluguel',\r\n    color: 'brown',\r\n    expense: true\r\n  },\r\n  salary: {\r\n    title: 'Salário',\r\n    color: 'green',\r\n    expense: false\r\n  }\r\n}","import { Item } from '../types/Item'\r\n\r\nexport const items: Item[] = [\r\n  {\r\n    date: new Date(2021, 9, 5),\r\n    category: 'food',\r\n    title: 'McDonalds',\r\n    value: 32.12\r\n  },\r\n  {\r\n    date: new Date(2021, 9, 15),\r\n    category: 'food',\r\n    title: 'Burger King',\r\n    value: 28\r\n  },\r\n  {\r\n    date: new Date(2021, 9, 15),\r\n    category: 'rent',\r\n    title: 'Aluguel Apt',\r\n    value: 2300\r\n  },\r\n  {\r\n    date: new Date(2021, 10, 18),\r\n    category: 'salary',\r\n    title: 'Salário ACME',\r\n    value: 4500\r\n  }\r\n]","import { Item } from '../types/Item'\r\n\r\nexport const getCurrentMonth = () => {\r\n  let now = new Date()\r\n  return `${now.getFullYear()}-${now.getMonth()+1}`\r\n}\r\n\r\nexport const filterListByMonth = (list: Item[], date: string): Item[] => {\r\n  let newList: Item[] = []\r\n  let [year, month] = date.split('-')\r\n\r\n  for(let i in list) {\r\n    if (\r\n      list[i].date.getFullYear() === parseInt(year) &&\r\n      (list[i].date.getMonth() + 1) === parseInt(month)\r\n    ) {\r\n      newList.push(list[i])\r\n    }\r\n  }\r\n  return newList\r\n}\r\n\r\nconst addZeroToDate = (n: number): string => n < 10 ? `0${n}` : `${n}`\r\n\r\nexport const formatDate = (date: Date): string => {\r\n  let year = date.getFullYear()\r\n  let month = date.getMonth() + 1\r\n  let day = date.getDate()\r\n\r\n  return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`\r\n}\r\n\r\nexport const formatCurrentMonth = (currentMonth: string): string => {\r\n  let [year, month] = currentMonth.split('-')\r\n  let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']\r\n  return `${months[parseInt(month) - 1]} de ${year}`\r\n}\r\n","import styled from 'styled-components'\r\nimport { Item } from '../../types/Item'\r\nimport { formatDate } from '../../helpers/dateFilter'\r\nimport { categories } from '../../data/categories'\r\n\r\ntype Props = {\r\n  item: Item\r\n}\r\n\r\nexport const TableItem = ({ item }: Props) => {\r\n  return (\r\n    <TableLine>\r\n      <TableColumn>{formatDate(item.date)}</TableColumn>\r\n      <TableColumn>\r\n        <TableCategory color={categories[item.category].color}>\r\n          {categories[item.category].title}\r\n        </TableCategory>\r\n      </TableColumn>\r\n      <TableColumn>{item.title}</TableColumn>\r\n      <TableColumn>\r\n        <TableValue color={categories[item.category].expense ? 'red' : 'green'}>\r\n          R$ {item.value}\r\n        </TableValue>\r\n      </TableColumn>\r\n    </TableLine>\r\n  )\r\n}\r\n\r\nconst TableLine = styled.tr`\r\n`\r\n\r\nconst TableColumn = styled.td`\r\n  padding: 10px 0;\r\n`\r\n\r\nconst TableCategory = styled.div<{ color: string }>`\r\n  display: inline-block;\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n  background: ${props => props.color};\r\n`\r\n\r\nconst TableValue = styled.div<{ color: string }>`\r\n  color: ${props => props.color};\r\n`","import styled from 'styled-components'\r\nimport { Item } from '../../types/Item'\r\nimport { TableItem } from '../TableItem'\r\n\r\ntype Props = {\r\n  list: Item[]\r\n  \r\n}\r\n\r\nexport const TableArea = ({ list }: Props) => {\r\n  return (\r\n    <Table>\r\n      <thead>\r\n        <tr>\r\n          <TableHeadColumn width={100}>Data</TableHeadColumn>\r\n          <TableHeadColumn width={130}>Categoria</TableHeadColumn>\r\n          <TableHeadColumn>Título</TableHeadColumn>\r\n          <TableHeadColumn width={150}>Valor</TableHeadColumn>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {list.map((item, index) => (\r\n          <TableItem key={index} item={item} />\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  box-shadow: 0px 0px 5px #ccc;\r\n  border-radius: 10px;\r\n  margin-top: 20px;\r\n`\r\n\r\nconst TableHeadColumn = styled.th<{ width?: number }>`\r\n  width: ${props => props.width ? `${props.width}px` : 'auto'};\r\n  padding: 10px 0;\r\n  text-align: left;\r\n`","import styled from 'styled-components'\r\n\r\ntype Props = {\r\n  title: string\r\n  value: number\r\n  color?: string\r\n}\r\n\r\nexport const ResumeItem = ({ title, value, color }: Props) => {\r\n  return (\r\n    <Container>\r\n      <Title>{title}</Title>\r\n      <Info color={color}>R$ {value}</Info>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nconst Title = styled.div`\r\n  text-align: center;\r\n  font-weight: bold;\r\n  color: #888;\r\n  margin-bottom: 5px;\r\n`\r\n\r\nconst Info = styled.div<{ color? : string}>`\r\n  text-align: center;\r\n  font-weight: bold;\r\n  color: ${props => props.color ?? '#000'};\r\n`","import styled from 'styled-components'\r\nimport { formatCurrentMonth } from '../../helpers/dateFilter'\r\nimport { ResumeItem } from '../ResumeItem'\r\n\r\ntype Props = {\r\n  currentMonth: string\r\n  onMonthChange: (newMonth: string) => void\r\n  income: number\r\n  expense: number\r\n}\r\n\r\nexport const InfoArea = ({ currentMonth, onMonthChange, income, expense }: Props) => {\r\n\r\n  const handlePrevMonth = () => {\r\n    let [year, month] = currentMonth.split('-')\r\n    let currentDate = new Date(parseInt(year), parseInt(month) -1, 1)\r\n    currentDate.setMonth(currentDate.getMonth() - 1)\r\n    onMonthChange(`${currentDate.getFullYear()} - ${currentDate.getMonth() + 1}`)\r\n  }\r\n\r\n  const handleNextMonth = () => {\r\n    let [year, month] = currentMonth.split('-')\r\n    let currentDate = new Date(parseInt(year), parseInt(month) -1, 1)\r\n    currentDate.setMonth(currentDate.getMonth() + 1)\r\n    onMonthChange(`${currentDate.getFullYear()} - ${currentDate.getMonth() + 1}`)\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <MonthArea>\r\n        <MonthArrow onClick={handlePrevMonth}>⬅️</MonthArrow>\r\n        <MonthTitle>{formatCurrentMonth(currentMonth)}</MonthTitle>\r\n        <MonthArrow onClick={handleNextMonth}>➡️</MonthArrow>\r\n      </MonthArea>\r\n      <ResumeArea>\r\n        <ResumeItem title='Receitas' value={income} />\r\n        <ResumeItem title='Despesas' value={expense} />\r\n        <ResumeItem\r\n          title='Balanço' \r\n          value={income - expense}\r\n          color={(income - expense) < 0 ? 'red' : 'green'}\r\n        />\r\n      </ResumeArea>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  background: #fff;\r\n  box-shadow: 0px 0px 5px #ccc;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  margin-top: -40px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst MonthArea = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst MonthArrow = styled.div`\r\n  width: 40px;\r\n  text-align: center;\r\n  font-size: 25px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst MonthTitle = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst ResumeArea = styled.div`\r\n  flex: 2;\r\n  display: flex;\r\n`","import styled from 'styled-components'\r\nimport { useState } from 'react';\r\nimport { Item } from '../../types/Item';\r\n\r\nimport { categories } from '../../data/categories';\r\n\r\ntype Props = {\r\n  onAdd: (item: Item) => void;\r\n};\r\n\r\nexport const InputArea = ({ onAdd }: Props) => {\r\n  const [dateField, setDateField] = useState('');\r\n  const [categoryField, setCategoryField] = useState('');\r\n  const [titleField, setTitleField] = useState('');\r\n  const [valueField, setValueField] = useState(0);\r\n\r\n  let categoryKeys: string[] = Object.keys(categories);\r\n\r\n  const handleAddEvent = () => {\r\n    let errors: string[] = [];\r\n\r\n    if(isNaN(new Date(dateField).getTime())) {\r\n      errors.push('Data inválida!');\r\n    }\r\n    if(!categoryKeys.includes(categoryField)) {\r\n      errors.push('Categoria inválida!');\r\n    }\r\n    if(titleField === '') {\r\n      errors.push('Título vazio!');\r\n    }\r\n    if(valueField <= 0) {\r\n      errors.push('Valor inválido!');\r\n    }\r\n\r\n    if(errors.length > 0) {\r\n      alert(errors.join(\"\\n\"));\r\n    } else {\r\n      onAdd({\r\n        date: new Date(dateField),\r\n        category: categoryField,\r\n        title: titleField,\r\n        value: valueField\r\n      });\r\n      clearFields();\r\n    }\r\n  }\r\n\r\n  const clearFields = () => {\r\n    setDateField('');\r\n    setCategoryField('');\r\n    setTitleField('');\r\n    setValueField(0);\r\n  }\r\n\r\n  return (\r\n      <Container>\r\n        <InputLabel>\r\n          <InputTitle>Data</InputTitle>\r\n          <Input type=\"date\" value={dateField} onChange={e => setDateField(e.target.value)} />\r\n        </InputLabel>\r\n        <InputLabel>\r\n          <InputTitle>Categoria</InputTitle>\r\n          <Select value={categoryField} onChange={e => setCategoryField(e.target.value)}>\r\n            <>\r\n              <option></option>\r\n              {categoryKeys.map((key, index) => (\r\n                <option key={index} value={key}>{categories[key].title}</option>\r\n              ))}\r\n            </>\r\n          </Select>\r\n        </InputLabel>\r\n        <InputLabel>\r\n          <InputTitle>Título</InputTitle>\r\n          <Input type=\"text\" value={titleField} onChange={e => setTitleField(e.target.value)} />\r\n        </InputLabel>\r\n        <InputLabel>\r\n          <InputTitle>Valor</InputTitle>\r\n          <Input type=\"number\" value={valueField} onChange={e => setValueField(parseFloat(e.target.value))} />\r\n        </InputLabel>\r\n        <InputLabel>\r\n          <InputTitle>&nbsp;</InputTitle>\r\n          <Button onClick={handleAddEvent}>Adicionar</Button>\r\n        </InputLabel>\r\n      </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n    background-color: #FFF;\r\n    box-shadow: 0px 0px 5px #CCC;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    margin-top: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\nconst InputLabel = styled.label`\r\n    flex: 1;\r\n    margin: 10px;\r\n`;\r\nconst InputTitle = styled.div`\r\n    font-weight: bold;\r\n    margin-bottom: 5px;\r\n`;\r\nconst Input = styled.input`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n`;\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n`;\r\nconst Button = styled.button`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n    background-color: lightblue;\r\n    color: black;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: blue;\r\n        color: white;\r\n    }\r\n`;","import { useState, useEffect } from \"react\"\nimport { Container, Header, HeaderText, Body } from \"./App.styles\"\nimport { Category } from './types/Category'\nimport { Item } from './types/Item'\nimport { categories } from './data/categories'\nimport { items } from './data/items'\nimport { getCurrentMonth, filterListByMonth } from './helpers/dateFilter'\nimport { TableArea } from './components/TableArea'\nimport { InfoArea } from \"./components/InfoArea\"\nimport { InputArea } from './components/InputArea'\n\nconst App = () => {\n\n  const [list, setList] = useState(items)\n  const [filteredList, setFilteredList] = useState<Item[]>([])\n  const [currentMonth, setCurrentMonth] = useState(getCurrentMonth())\n  const [income, setIncome] = useState(0)\n  const [expense, setExpense] = useState(0)\n\n  useEffect(() => {\n    setFilteredList( filterListByMonth(list, currentMonth) )\n  }, [list, currentMonth])\n\n  useEffect(() => {\n    let incomeCount = 0\n    let expenseCount = 0\n\n    for (let i in filteredList) {\n      if (categories[filteredList[i].category].expense) {\n        expenseCount += filteredList[i].value\n      } else {\n        incomeCount += filteredList[i].value\n      }\n    }\n\n    setIncome(incomeCount)\n    setExpense(expenseCount)\n\n  }, [filteredList])\n\n  const handleMonthChange = (newMonth: string) => {\n    setCurrentMonth(newMonth)\n  }\n\n  const handleAddItem = (item: Item) => {\n    let newList = [...list];\n    newList.push(item);\n    setList(newList);\n  }\n\n  return (\n    <Container>\n      <Header>\n        <HeaderText>\n          Sistema Financeiro\n        </HeaderText>\n      </Header>\n      <Body>\n        <InfoArea \n          currentMonth={currentMonth}\n          onMonthChange={handleMonthChange}\n          income={income}\n          expense={expense}\n        />\n\n        <InputArea onAdd={handleAddItem} />\n\n        <TableArea list={filteredList} />\n      </Body>\n    </Container>\n  )\n}\n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}